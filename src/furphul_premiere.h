// furphul_premiere.h// © Copyright 1995 BIAS/Steve Berkley.  All Rights Reserved.// Premiereª-specific API#define fsExecute		0#define fsSetup			1#define gaStereo 		0x0100#define ga16Bit 		0x0200typedef long	BottleRec;// PREMIERE FETCH CALLBACK DESCRIPTORStypedef pascal short (*AFilterCallBackProcPtr) (long sample, long count,Ptr buffer, Handle privateData);#ifdef powerc 	typedef UniversalProcPtr AFilterCallBackUPP; 	enum {		uppFilterCallbackInfo = kPascalStackBased			 | RESULT_SIZE(SIZE_CODE(sizeof(short)))			 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(long)))			 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 		| STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Ptr)))			 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Handle)))		};	#define NewFilterCallbackUPP(userRoutine)		\		(AFilterCallBackUPP) NewRoutineDescriptor((ProcPtr)(userRoutine),uppFilterCallbackInfo, GetCurrentISA())			#define CallAFilterCallBack(userRoutine, sample, count, buffer, privateData)		\		CallUniversalProc((AFilterCallBackUPP)(userRoutine),uppFilterCallbackInfo, (sample), (count), (buffer), (privateData))#else	#define AFilterCallBackUPP AFilterCallBackProcPtr	#define NewFilterCallbackUPP(userRoutine)	\		(AFilterCallBackUPP)(userRoutine)	#define CallAFilterCallBack(userRoutine, sample, count, buffer, privateData)		\		(*(userRoutine))((sample), (count), (buffer), (privateData))#endiftypedef struct {	Handle					specsHandle;	Ptr						source;	Ptr						destination;	long					samplenum;	long					samplecount;	char					previewing;	Handle					privateData;	AFilterCallBackUPP		callBack;	long					totalsamples;	short					flags;	long					rate;	BottleRec				*bottleNecks;	short					version;	long					extraFlags;	short					fps;	} AudioRecord, **AudioFilter;// PREMIERE AUDIO FILTER ENTRY POINT DESCRIPTORStypedef pascal short (*PremiereEntryProcPtr) (short selector, AudioFiltertheData);#ifdef powerc 	typedef UniversalProcPtr PremiereEntryUPP; 	enum {		uppPremiereEntryProcInfo = kPascalStackBased			 | RESULT_SIZE(SIZE_CODE(sizeof(short)))			 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(short)))			 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Handle)))				};	#define NewPremiereEntryProc(userRoutine, info)		\		(PremiereEntryUPP) NewRoutineDescriptor((ProcPtr)(userRoutine),uppPremiereEntryProcInfo, (info))			#define CallPremiereEntryProc(userRoutine, selector, params)		\		CallUniversalProc((PremiereEntryUPP)(userRoutine),uppPremiereEntryProcInfo, (selector), (params))#else	#define PremiereEntryUPP PremiereEntryProcPtr	#define NewPremiereEntryProc(userRoutine, info)	\		(PremiereEntryUPP)(userRoutine)	#define CallPremiereEntryProc(userRoutine, selector, params)		\		(*(userRoutine))((selector), (params))#endiftypedef struct PremierePlugInType	{	FSSpec						filespec;	PremiereEntryUPP			pEntry;	AudioFilter					aRec;	} PremierePlugIn, *PremierePlugInPtr;